import re
from typing import Tuple

def assess_password_strength(password: str) -> Tuple[str, str]:
    """
    Assess the strength of a password based on length, complexity, and uniqueness.

    Args:
        password (str): The password to assess.

    Returns:
        Tuple[str, str]: A tuple containing the strength level (Weak, Medium, Strong) 
                         and feedback on the password.
    """
    feedback = []
    
    # Check for minimum length
    if len(password) < 8:
        feedback.append("Password is too short. Consider using at least 8 characters.")
    
    # Check for complexity
    if not re.search(r'[A-Z]', password):
        feedback.append("Add at least one uppercase letter.")
    if not re.search(r'[a-z]', password):
        feedback.append("Add at least one lowercase letter.")
    if not re.search(r'[0-9]', password):
        feedback.append("Add at least one digit.")
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        feedback.append("Add at least one special character (e.g., !@#$%^&*).")

    # Check for uniqueness
    if len(set(password)) / len(password) < 0.5:
        feedback.append("Increase character variety to make your password harder to guess.")

    # Determine strength level
    if len(feedback) == 0 and len(password) >= 12:
        strength = "Strong"
    elif len(feedback) <= 2:
        strength = "Medium"
    else:
        strength = "Weak"

    return strength, " ".join(feedback)

# Example usage
if __name__ == "__main__":
    password = input("Enter a password to test its strength: ")
    strength, feedback = assess_password_strength(password)
    print(f"Password Strength: {strength}")
    if feedback:
        print(f"Feedback: {feedback}")
